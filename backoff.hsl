import { bounce_list } from "extras://bounce-list";
import { queue_relinquish } from "extras://queue-relinquish";

function enable_backoff($arguments, $message, $list, $fields = [], $rate = none) {
    $pattern = none;
    if (is_array($list)) {
        $pattern = match_patterns($arguments, $list); // Backward compatibility
    } else {
        $result = bounce_list($list, $arguments["dsn"]["diagnosticcode"], $arguments["grouping"], $arguments["attempt"]["result"]["state"]);
        if ($result) {
            $pattern = ["pattern" => $result["pattern"]];
            foreach (str_split($result["value"], ",") as $setting) {
                [$key, $value] = str_split($setting, "=");
                if (!$key or !$value) continue;
                if ($key === "suspend") $value = number($value);
                if ($key === "events") {
                    [$count, $interval] = array_map(number, str_split($value, "/"));
                    if ($count <= 1 or $interval <= 0) continue;
                    $value = ["count" => $count - 1, "interval" => $interval];
                }
                $pattern[$key] = $value;
            }
        }
    }
    if ($pattern !== none) {
        // Filter policies to enable based on optional $fields parameter
        $policies = filter_policies($arguments["policy"]["policies"] ?? [], $fields);

        // Store field values in an easier to use format
        $values = [
            "localip" => $arguments["attempt"]["connection"]["localip"],
            "remoteip" => $arguments["attempt"]["connection"]["remoteip"],
            "remotemx" => $arguments["attempt"]["connection"]["remotemx"],
            "recipientdomain" => $message["recipientaddress"]["domain"],
            "jobid" => $message["jobid"],
            "transportid" => $message["transportid"],
            "grouping" => $arguments["grouping"]
        ];

        // Go through all filtered policies and enable them
        foreach ($policies as $policy) {
            // Skip policies that already have backoff enabled
            if (isset($policy["tags"]) and array_includes(function ($tag) {
                return $tag === "backoff" or $tag =~ #/^backoff-.+$/;
            }, $policy["tags"])) {
                continue;
            }

            // Set all field values in condition
            $condition = [];
            foreach ($policy["fields"] as $field) {
                if ($values[$field] !== none) {
                    $condition[$field] = $values[$field];
                }
            }

            // Skip policy if some values are missing
            if (length($policy["fields"]) !== length($condition)) {
                continue;
            }

            // Get values from properties
            $properties = $policy["properties"];

            // Events
            if ($pattern["events"]) {
                $entry = json_encode([...$condition, "pattern" => $pattern["pattern"]]);
                if ($rate("backoff", $entry, $pattern["events"]["count"], $pattern["events"]["interval"]) === true) {
                    continue;
                }
            }

            // Suspend
            $suspendable = isset($properties["backoff-suspendable"]) and str_lower($properties["backoff-suspendable"]) === "true" ? true : false;
            if ($pattern["suspend"] and $suspendable) {
                $options = [];
                if ($pattern["tag"]) $options["tag"] = $pattern["tag"];
                queue_suspend($condition, $pattern["suspend"], $options);
                continue;
            }

            // Requeue
            if (isset($properties["backoff-requeue"]) and $properties["backoff-ttl"]) {
                $requeue = str_lower($properties["backoff-requeue"]) === "true" ? true : false;
                if ($requeue) {
                    $return = ["backoff-requeue" => true];
                    foreach ($properties as $key => $value) {
                        if ($key[0:16] === "backoff-requeue-") {
                            $return[$key] = $value;
                        }
                    }
                    queue_relinquish($condition, number($properties["backoff-ttl"]), ["return" => $return]);
                    continue;
                }
            }

            // Policy
            $backoff = [];
            if ($properties["backoff-rate"]) {
                if ($properties["backoff-rate"] =~ #/\//) {
                    $backoff["rate"] = str_split($properties["backoff-rate"], "/");
                } else {
                    $backoff["rate"] = [$properties["backoff-rate"], 1];
                }
            }
            if ($properties["backoff-concurrency"]) {
                $backoff["concurrency"] = $properties["backoff-concurrency"];
            }
            if (isset($policy["stop"])) {
                $backoff["stop"] = $policy["stop"];
            }
            if (isset($properties["backoff-stop"])) {
                $stop = str_lower($properties["backoff-stop"]) === "true" ? true : false;
                $backoff["stop"] = $stop;
            }

            // Enable policy if backoff values were found
            if (length($backoff) > 0 and $properties["backoff-ttl"]) {
                $backoff["tag"] = is_array($pattern) and $pattern["tag"] ? "backoff-".$pattern["tag"] : "backoff"; // Set backoff tag
                queue_policy($policy["fields"], $condition, $backoff, $properties["backoff-ttl"], ["update" => true]);
            }
        }
        return ["pattern" => $pattern];
    }
}

function disable_backoff($arguments, $message, $fields = []) {
    // Filter policies to disable based on optional $fields parameter
    $policies = filter_policies($arguments["policy"]["policies"] ?? [], $fields);
    foreach ($policies as $policy) {
        $properties = $policy["properties"];
        $disableable = isset($properties["backoff-disableable"]) and str_lower($properties["backoff-disableable"]) === "true" ? true : false;
        // Check if policy is allowed to be disabled
        if ($disableable === true) {
            if (isset($policy["dynamic"])) {
                foreach ($policy["dynamic"] as $dynamic) {
                    if ($dynamic["tag"] === "backoff" or $dynamic["tag"] =~ #/^backoff-.+$/) {
                        queue_policy_delete($dynamic["id"]); // Disable backoff policy
                    }
                }
            }
        }
    }
}

function filter_policies($policies, $fields) {
    if (length($fields) > 0) {
        $policies = array_filter(function ($policy) closure($fields) {
            $match = true;
            if (length($policy["fields"]) === length($fields)) {
                foreach ($fields as $field) {
                    if (!array_includes($field, $policy["fields"])) {
                        $match = false;
                        break;
                    }
                }
            } else {
                $match = false;
            }
            return $match;
        }, $policies);
    }
    return $policies;
}

function match_patterns($arguments, $patterns) {
    $result = "";
    if ($arguments["attempt"]["result"]) {
        $result = $arguments["attempt"]["result"]["code"]." ";
        if ($arguments["attempt"]["result"]["enhanced"])
            $result .= array_join($arguments["attempt"]["result"]["enhanced"], ".")." ";
        $result .= array_join($arguments["attempt"]["result"]["reason"], " ");
    } else if ($arguments["attempt"]["error"]["message"]) {
        $result = $arguments["attempt"]["error"]["message"];
    }
    if ($result) {
        foreach ($patterns as $pattern) {
            if (is_array($pattern)) {
                if ($pattern["pattern"] and $result =~ $pattern["pattern"]) {
                    return $pattern;
                }
            } else {
                if ($pattern and $result =~ $pattern) {
                    return $pattern;
                }
            }
        }
    }
}